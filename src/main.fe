contract ERC721 {
    pub fn transferFrom(self, from: address, to: address, token_id: u256) -> bool {
        return true
    }
}

struct Gift {
    #indexed
    pub gifter: address
    pub collectible: address
    pub token_id: u256
}

struct Whitelist {
    #indexed
    pub collectible: address
}

struct GiftEnded {}
struct NotWhitelisted {}
struct NotAdmin {}

contract Main {
    admin: address
    whitelist: Map<address, bool>
    has_gifed: Map<address, bool>

    pub fn get_admin(self) -> address {
        return self.admin
    }

    pub fn __init__(mut self, ctx: Context) {
        self.admin = ctx.msg_sender()
    }

    pub fn whitelist(mut self, mut ctx: Context, collectible: address) {
        if ctx.msg_sender() != self.admin {
            revert NotAdmin()
        }

        self.whitelist[collectible] = true
        ctx.emit(Whitelist(collectible: collectible))
    }

    pub fn gift(mut self, mut ctx: Context, collectible: address, token_id: u256) {
        if ctx.block_timestamp() > 1703491200 {
            revert GiftEnded()
        }

        if self.whitelist[collectible] != true {
            revert NotWhitelisted()
        }

        ERC721(collectible).transferFrom(from: ctx.msg_sender(), to: ctx.self_address(), token_id)

        ctx.emit(Gift(gifter: ctx.msg_sender(), collectible: collectible, token_id: token_id))
    }
}

#test
fn test_main(mut ctx: Context) {
    // Create a new `Main` contract via `ctx` and test that `get_42` return 42.
    let main: Main = Main.create(ctx, 0)
    // assert main.get() == 42
}
